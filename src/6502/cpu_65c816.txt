## This is a description file for a 6502-like CPU.
## See https://github.com/mist64/c64ref for details.

[info]
manufacturer WDC
name         65C816
year         1984
id           65c816 ## https://en.wikipedia.org/wiki/WDC_65C816
basedon      65c02
description  This is the original implementation of the 16 bit version of the 65C02 designed by Western Design Center, Inc. It supports all instructions of original WDC 65C02, and adds support support for 16 bit registers, 24 bit addresses, a relocatable zero page and stack-relative addressing, filling all 256 opcodes. (The timing information corresponds to native mode.)

[registers]
#   A,X,Y,P,S,DBR,D,K,PC
A   16   Accumulator
X   16   X Index Register
Y   16   Y Index Register
P   8    Processor Status
S   16   Stack Pointer
DBR 8    Data Bank Register
D   16   Direct Page Register
K   8    Program Bank Register
PC  16   Program Counter

[flags]
5  M  Accumulator/Memory Width
4  X  Index Register Width
10 E  Emulation Mode

[mnemos]
BRL  Branch Long
COP  Coprocessor
JSL  Jump to Subroutine Long
MVN  Move Memory Negative
MVP  Move Memory Positive
PEA  Push Effective Address
PEI  Push Effective Indirect Address
PER  Push Effective Relative Address
PHB  Push Data Bank Register
PHD  Push Direct Register
PHK  Push K Register
PLB  Pull Data Bank Register
PLD  Pull Direct Register
REP  Reset Processor Status Bits
RTL  Return From Subroutine Long
SEP  Set Processor Status Bits
STP  Stop the Clock
TCD  Transfer C Accumulator to Direct Register
TCS  Transfer C Accumulator to Stack Pointer
TDC  Transfer Direct Register to C Accumulator
TSC  Transfer Stack Pointer to C Accumulator
TXY  Transfer X to Y
TYX  Transfer Y to X
WAI  Wait for Interrupt
WDM  William D. Mensch, Jr.
XBA  Exchange B and A Accumulator
XCE  Exchange Carry and Emulation Flags

[operations]
BRL  ctrl   --------  Branch always long
COP  ctrl   ----01--  Co-processor empowerment
JSL  ctrl   --------  Jump to subroutine long
MVN  load   --------  Move memory negative
MVP  load   --------  Move memory positive
PEA  stack  --------  Mw↓
PEI  stack  --------  Mw↓
PER  stack  --------  Mw↓
PHB  stack  --------  B↓
PHD  stack  --------  D↓
PHK  stack  --------  K↓
PLB  stack  *-----*-  B↑
PLD  stack  *-----*-  D↑
REP  flags  ********  P ⊼ M → P
RTL  ctrl   --------  Return from subroutine long
SEP  flags  ********  P ∨ M → P
STP  ctrl   --------  Stop the clock
TCD  trans  *-----*-  C → D
TCS  trans  --------  C → S
TDC  trans  *-----*-  D → C
TSC  trans  *-----*-  S → C
TXY  trans  *-----*-  T → Y
TYX  trans  *-----*-  Y → X
WAI  ctrl   --------  Wait for interrupt
WDM  nop    --------  Reserved for future expansion
XBA  trans  *-----*-  B ↔ A
XCE  flags  -------** C ↔ E

[addmodes]
## new 8/16 bit immediates
#m:d8/d16  3-m  #$nn/$nnnn  Immediate (M)
#x:d8/d16  3-x  #$nn/$nnnn  Immediate (X)

## new modes
[a16]      3    [$nnnn]     Absolute Indirect Long
(a16,X)    3    ($nnnn,X)   Absolute X-Indexed Indirect
[a8]       2    [$nn]       Direct Page Indirect Long
[a8],Y     2    [$nn],Y     Direct Page Indirect Y-Indexed Long
a24        4    $nnnnnn     Absolute Long
a24,X      4    $nnnnnn,X   Absolute X-Indexed Long
r16        3    $nnnn       Relative (word)
src,dest   3    $nn,$nn     Block Move
a8,S       2    $nn,S       Stack Relative
(a8,S),Y   2    ($nn,S),Y   Stack Relative Indirect Y-Indexed

## renamed modes (zero page -> direct page)
a8     2  $nn      Direct Page
a8,X   2  $nn,X    X-Indexed Direct Page
a8,Y   2  $nn,Y    Y-Indexed Direct Page
(a8,X) 2  ($nn,X)  X-Indexed Direct Page Indirect
(a8),Y 2  ($nn),Y  Direct Page Indirect Y-Indexed

[opcodes]
02  COP   #d8
03  ORA   a8,S
07  ORA   [a8]
0B  PHD
0F  ORA   a24
13  ORA   (a8,S),Y
17  ORA   [a8],Y
1B  TCS
1F  ORA   a24,X
22  JSL   a24
23  AND   a8,S
27  AND   [a8]
2B  PLD
2F  AND   a24
33  AND   (a8,S),Y
37  AND   [a8],Y
3B  TSC
3F  AND   a24,X
42  WDM   #d8
43  EOR   a8,S
44  MVP   src,dest
47  EOR   [a8]
4B  PHK
4F  EOR   a24
53  EOR   (a8,S),Y
54  MVN   src,dest
57  EOR   [a8],Y
5B  TCD
5C  JMP   a24
5F  EOR   a24,X
62  PER   #d8
63  ADC   a8,S
67  ADC   [a8]
6B  RTL
6F  ADC   a24
73  ADC   (a8,S),Y
77  ADC   [a8],Y
7B  TDC
7F  ADC   a24,X
82  BRL   r16
83  STA   a8,S
87  STA   [a8]
8B  PHB
8F  STA   a24
93  STA   (a8,S),Y
97  STA   [a8],Y
9B  TXY
9F  STA   a24,X
A3  LDA   a8,S
A7  LDA   [a8]
AB  PLB
AF  LDA   a24
B3  LDA   (a8,S),Y
B7  LDA   [a8],Y
BB  TYX
BF  LDA   a24,X
C2  REP   #d8
C3  CMP   a8,S
C7  CMP   [a8]
CB  WAI
CF  CMP   a24
D3  CMP   (a8,S),Y
D4  PEI   a8
D7  CMP   [a8],Y
DB  STP
DC  JMP   [a16]
DF  CMP   a24,X
E2  SEP   #d8
E3  SBC   a8,S
E7  SBC   [a8]
EB  XBA
EF  SBC   a24
F3  SBC   (a8,S),Y
F4  PEA   #d8
F7  SBC   [a8],Y
FB  XCE
FC  JSR   (a16,X)
FF  SBC   a24,X

09  ORA   #m:d8/d16
29  AND   #m:d8/d16
49  EOR   #m:d8/d16
69  ADC   #m:d8/d16
89  BIT   #m:d8/d16
A0  LDY   #x:d8/d16
A2  LDX   #x:d8/d16
A9  LDA   #m:d8/d16
C0  CPY   #x:d8/d16
C9  CMP   #m:d8/d16
E0  CPX   #x:d8/d16
E9  SBC   #m:d8/d16

[timing]
00  8
01  7-m+w
02  8
03  5-m
04  7-2*m+w
05  4-m+w
06  7-2*m+w
07  7-m+w
08  3
09  3-m
0A  2
0B  4
0C  8-2*m
0D  5-m
0E  8-2*m
0F  6-m
10  2+t
11  7-m+w-x+x*p
12  6-m+w
13  8-m
14  7-2*m+w
15  5-m+w
16  8-2*m+w
17  7-m+w
18  2
19  6-m-x+x*p
1A  2
1B  2
1C  8-2*m
1D  6-m-x+x*p
1E  9-2*m
1F  6-m
20  6
21  7-m+w
22  8
23  5-m
24  4-m+w
25  4-m+w
26  7-2*m+w
27  7-m+w
28  4
29  3-m
2A  2
2B  5
2C  5-m
2D  5-m
2E  8-2*m
2F  6-m
30  2+t
31  7-m+w-x+x*p
32  6-m+w
33  8-m
34  5-m+w
35  5-m+w
36  8-2*m+w
37  7-m+w
38  2
39  6-m-x+x*p
3A  2
3B  2
3C  6-m-x+x*p
3D  6-m-x+x*p
3E  9-2*m
3F  6-m
40  7
41  7-m+w
42  2
43  5-m
44  7
45  4-m+w
46  7-2*m+w
47  7-m+w
48  4-m
49  3-m
4A  2
4B  3
4C  3
4D  5-m
4E  8-2*m
4F  6-m
50  2+t
51  7-m+w-x+x*p
52  6-m+w
53  8-m
54  7
55  5-m+w
56  8-2*m+w
57  7-m+w
58  2
59  6-m-x+x*p
5A  4-x
5B  2
5C  4
5D  6-m-x+x*p
5E  9-2*m
5F  6-m
60  6
61  7-m+w
62  6
63  5-m
64  4-m+w
65  4-m+w
66  7-2*m+w
67  7-m+w
68  5-m
69  3-m
6A  2
6B  6
6C  5
6D  5-m
6E  8-2*m
6F  6-m
70  2+t
71  7-m+w-x+x*p
72  6-m+w
73  8-m
74  5-m+w
75  5-m+w
76  8-2*m+w
77  7-m+w
78  2
79  6-m-x+x*p
7A  5-x
7B  2
7C  6
7D  6-m-x+x*p
7E  9-2*m
7F  6-m
80  3
81  7-m+w
82  4
83  5-m
84  4-x+w
85  4-m+w
86  4-x+w
87  7-m+w
88  2
89  3-m
8A  2
8B  3
8C  5-x
8D  5-m
8E  5-x
8F  6-m
90  2+t
91  7-m+w
92  6-m+w
93  8-m
94  5-x+w
95  5-m+w
96  5-x+w
97  7-m+w
98  2
99  6-m
9A  2
9B  2
9C  5-m
9D  6-m
9E  6-m
9F  6-m
A0  3-x
A1  7-m+w
A2  3-x
A3  5-m
A4  4-x+w
A5  4-m+w
A6  4-x+w
A7  7-m+w
A8  2
A9  3-m
AA  2
AB  4
AC  5-x
AD  5-m
AE  5-x
AF  6-m
B0  2+t
B1  7-m+w-x+x*p
B2  6-m+w
B3  8-m
B4  5-x+w
B5  5-m+w
B6  5-x+w
B7  7-m+w
B8  2
B9  6-m-x+x*p
BA  2
BB  2
BC  6-2*x+x*p
BD  6-m-x+x*p
BE  6-2*x+x*p
BF  6-m
C0  3-x
C1  7-m+w
C2  3
C3  5-m
C4  4-x+w
C5  4-m+w
C6  7-2*m+w
C7  7-m+w
C8  2
C9  3-m
CA  2
CB  3
CC  5-x
CD  5-m
CE  8-2*m
CF  6-m
D0  2+t
D1  7-m+w-x+x*p
D2  6-m+w
D3  8-m
D4  6+w
D5  5-m+w
D6  8-2*m+w
D7  7-m+w
D8  2
D9  6-m-x+x*p
DA  4-x
DB  3
DC  6
DD  6-m-x+x*p
DE  9-2*m
DF  6-m
E0  3-x
E1  7-m+w
E2  3
E3  5-m
E4  4-x+w
E5  4-m+w
E6  7-2*m+w
E7  7-m+w
E8  2
E9  3-m
EA  2
EB  3
EC  5-x
ED  5-m
EE  8-2*m
EF  6-m
F0  2+t
F1  7-m+w-x+x*p
F2  6-m+w
F3  8-m
F4  5
F5  5-m+w
F6  8-2*m+w
F7  7-m+w
F8  2
F9  6-m-x+x*p
FA  5-x
FB  2
FC  8
FD  6-m-x+x*p
FE  9-2*m
FF  6-m

[vectors]
00FFE4 COP
00FFE6 BRK
00FFE8 ABORT
00FFEA NMI
00FFEE IRQ
00FFFC RESET

[documentation-mnemos|noinherit]

[documentation-addmodes|noinherit]
