## This is a description file for a 6502-like CPU.
## See https://github.com/mist64/c64ref for details.

[info]
name         65DTV02
year         2005
id           65dtv02
basedon      6502
description  This is a modern reimplementation of the 6502 by Jeri Ellsworth as used in the C64DTV2. It reproduces all quirks of the original 6502 as well as most undocumented opcodes and adds three new instructions and an MMU. (The timing information corresponds to "skip internal cycles" mode.)

[registers]
#   A,X,Y,S,P,PC,R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15
A    8   Accumulator (alias for R0-R15)
X    8   X Index Register (alias for R0-R15)
Y    8   Y Index Register (alias for R0-R15)
R0   8  Default Accumulator
R1   8  Default Y Register
R2   8  Default X Register
R3   8  Reserved
R4   8  Reserved
R5   8  Reserved
R6   8  Reserved
R7   8  Reserved
R8   8  Bank 0-3 Access Mode
R9   8  CPU Control
R10  8  Base Page Segment
R11  8  Stack Segment
R12  8  Bank 0 Segment
R13  8  Bank 1 Segment
R14  8  Bank 2 Segment
R15  8  Bank 3 Segment

[mnemos]
# new instructions
SAC  Set Accumulator Mapping
SIR  Set Index Register Mapping
BRA  Branch Always

# bugs in undocumented instructions
2B  *ANC  #d8    ## https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide
9B  *NOP  a16,Y  ## VICE source
##C7  *DCP  a8   ## unclear -- https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide

[operations]
SAC  flags  --------  Set Accumulator Mapping
SIR  flags  --------  Set Index Register Mapping
BRA  ctrl   --------  Branch Always

[opcodes]
12  BRA   r8
32  SAC   #d8
42  SIR   #d8

[timing] ## "skip internal cycles" mode
00  6
01  6
02  X
03  7
04  3
05  3
06  4
07  4
08  2
09  2
0A  1
0B  2
0C  4
0D  4
0E  5
0F  5
10  2
11  5
12  2
13  6
14  3
15  3
16  4
17  4
18  1
19  4
1A  1
1B  5
1C  4
1D  4
1E  5
1F  5
20  5
21  6
22  X
23  7
24  3
25  3
26  4
27  4
28  2
29  2
2A  1
2B  2
2C  4
2D  4
2E  5
2F  5
30  2
31  5
32  2
33  6
34  3
35  3
36  4
37  4
38  1
39  4
3A  1
3B  5
3C  4
3D  4
3E  5
3F  5
40  4
41  6
42  2
43  7
44  3
45  3
46  4
47  4
48  2
49  2
4A  1
4B  2
4C  3
4D  4
4E  5
4F  5
50  2
51  5
52  X
53  6
54  3
55  3
56  4
57  4
58  1
59  4
5A  1
5B  5
5C  4
5D  4
5E  5
5F  5
60  4
61  6
62  X
63  7
64  3
65  3
66  4
67  4
68  2
69  2
6A  1
6B  2
6C  5
6D  4
6E  5
6F  5
70  2
71  5
72  X
73  6
74  3
75  3
76  4
77  4
78  1
79  4
7A  1
7B  5
7C  4
7D  4
7E  5
7F  5
80  2
81  6
82  2
83  6
84  3
85  3
86  3
87  3
88  1
89  2
8A  1
8B  2
8C  4
8D  4
8E  4
8F  4
90  2
91  5
92  X
93  5
94  3
95  3
96  3
97  3
98  1
99  4
9A  1
9B  4
9C  4
9D  4
9E  4
9F  4
A0  2
A1  6
A2  2
A3  6
A4  3
A5  3
A6  3
A7  3
A8  1
A9  2
AA  1
AB  2
AC  4
AD  4
AE  4
AF  4
B0  2
B1  5
B2  X
B3  5
B4  3
B5  3
B6  3
B7  3
B8  1
B9  4
BA  1
BB  4
BC  4
BD  4
BE  4
BF  4
C0  2
C1  6
C2  2
C3  7
C4  3
C5  3
C6  4
C7  4
C8  1
C9  2
CA  1
CB  2
CC  4
CD  4
CE  5
CF  5
D0  2
D1  5
D2  X
D3  6
D4  3
D5  3
D6  4
D7  4
D8  1
D9  4
DA  1
DB  5
DC  4
DD  4
DE  5
DF  5
E0  2
E1  6
E2  2
E3  7
E4  3
E5  3
E6  4
E7  4
E8  1
E9  2
EA  1
EB  2
EC  4
ED  4
EE  5
EF  5
F0  2
F1  5
F2  X
F3  6
F4  3
F5  3
F6  4
F7  4
F8  1
F9  4
FA  1
FB  5
FC  4
FD  4
FE  5
FF  5

[documentation-mnemos]
## https://www.c64-wiki.com/wiki/C64DTV_Programming_Guide

SAC  Set Accumulator Mapping
     The 65DTV02 has a register file of 16 bytes, some of which double as control/MMU registers. The lower four bits of the SAC instruction's immediate operand assign the register that will be accessed through read operations to the accumulator, and the upper four bits assign the register that will be accessed through write operations to the accumulator. The default register for the accumulator is 0.

SIR  Set Index Register Mapping
     The 65DTV02 has a register file of 16 bytes, some of which double as control/MMU registers. The lower four bits of the SIR instruction's immediate operand assign the register that index register X is mapped to, and the upper four bits assign the register that index register Y is mapped to. The default register for the index register X is 2, and the default for the index register Y is 1.

BRA  Branch Always
     This instruction takes an unconditional branch.
     BRA does not affect any of the flags or any other part of the machine other than the program counter.
